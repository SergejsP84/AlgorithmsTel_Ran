package Homeworks;

import java.util.Arrays;
import java.util.Random;

public class Homework1 {
    public static void main(String[] args) {
        int[] myArray = generateRandomArray();
        System.out.println("And so it came to pass, that a great amazing Array has been generated by the random forces of the Universe to serve our unique needs.");
        System.out.println("Behold this splendid Array of all arrays, and rejoice at its cosmic majesty: " + Arrays.toString(myArray));
        System.out.println();
        System.out.println("Lo, this here is the gem of this magnificent Array; its one and only Unique Number - " + returnUniqueNumber(myArray) + "!");
    }

    // Сложность приведённого далее алгоритма линейная ( O(n) ), поскольку
    // в данном коде определяющим фактором являются циклы, проходящиеся по
    // массивам. Ergo, при увеличении размера массива (например, вдвое),
    // время на выполнение операций также увеличится приблизительно вдвое.

public static int returnUniqueNumber(int[] myArray) {
        int uniqueNumber = 0;
        for (int i = 0; i < myArray.length - 1; i = i + 2) {
            if (myArray[i] != myArray[i+1]) {
                uniqueNumber = myArray[i];
                break;
            }
        }
        if (uniqueNumber == 0) uniqueNumber = myArray[myArray.length - 1];
        return uniqueNumber;
}

public static int[] generateRandomArray() {
    Random r1 = new Random();
    Random r2 = new Random();
    int sourceArraySize = r1.nextInt(3, 9);
    int[] numbers = new int[sourceArraySize * 2];
    int addedElement = 0;
    boolean alreadyExists = false;
    for (int i = 0; i < sourceArraySize * 2; i = i + 2) {
        alreadyExists = true;
        while (alreadyExists) {
            addedElement = r2.nextInt(1, 31);
            alreadyExists = false;
            for (int j = 0; j < sourceArraySize; j++) {
                if (addedElement == numbers[j]) alreadyExists = true;
            }
        }
        numbers[i] = addedElement;
        numbers[i+1] = addedElement;
    }
    Random r3 = new Random();
    int eliminatePosition = r3.nextInt(0, sourceArraySize * 2);
    numbers[eliminatePosition] = 666;
    int[] resultingArray = new int[sourceArraySize * 2 - 1];
    int indexAuxilia = 0;
    for (int i = 0; i < sourceArraySize * 2; i++) {
        if (numbers[i] != 666) {
            resultingArray[indexAuxilia] = numbers[i];
            indexAuxilia++;
        }
    }
    Arrays.sort(resultingArray);
    return resultingArray;
}

}

